//thread handle on OS side, bridges to wwThread.js (web worker,security layer between os and applications) which then bridges to applications
function threads(){}
    threads.threadHandlers=[new Worker("main/wwthreads.js")];//initially loads one thread handler (more can be spawned, if desired later). It can use multiple versions of thread handlers (each applicaiton may have different needs... thus different kind of scripting output,etc);

threadsrunApp=function(appId,parameter){
    
}

threads.threadHandlers.forEach(function(d) {
    d.onmessage = function(z) {
        var data = z.data;
        
        var code        = data[0];
        var id          = data[1];
        var appID       = data[2];
        var dataFromApp = data[3];
        
        var app         = undefined;
        var appDomArray = undefined;
        
        //code that are greater than 400s
        if (code >= 400) {
            app = applicationds.app[id];
            
            //only for 400s
            if (app && (code >= 404 && code < 500)) {
                appDomArray = app.documentElementCreatedArray[dataFromApp[1][1]];
            }
        }
        
        switch (code) {
        case -1: //from application (went through wwThread.js) console logging
            dataFromApp = data[3][1];
            console.log(dataFromApp);
            break;
        
        case 2: //from application (went through wwThread.js)
            applicationds.app[id].running = true;
            break;
        
        case 201: //resize
            var window = applicationds.app[id].windows[dataFromApp[1][2] + 1];
            if (window) {
                window.style.height = dataFromApp[1][1] + "px"
                window.style.width = dataFromApp[1][0] + "px";
                window.resizeItself();
            }
            break;
        
        case 202: //new window
            if (dataFromApp[1][0] == -1) {//see if window is -1, if so generate it as app's main window
                applicationds.app[id].windows[applicationds.app[id].windows.length] = windows.create(dataFromApp[1][1]);
                var window = applicationds.app[id].windows[applicationds.app[id].windows.length - 1];
                window.show();
                window.moveToDesktop();
            }
            break;
        
        case 203: //window title update
            var window = applicationds.app[id].windows[dataFromApp[1][0] + 1];
            if (window) {
                window.windowTitleContainer.windowTitleText.textContent = dataFromApp[1][1];
                window.windowTitleContainer.onTitleUpdate();
            }
            break;
        
        case 402: //createElement (also appending it ot documentfragment)
            if (app) {
                //var ele = document.createElement(dataFromApp[1][0]);
                var ele = createDom(dataFromApp[1][0]);
                app.documentElementCreatedArray[dataFromApp[1][2]] = ele;
                if (dataFromApp[1][0] == "img") {
                    ele.draggable = false;
                    ele.ondragstart = function(){return false};
                }
            }
            break;
        
        case 403: //appendChild
            if (app) {
                if (dataFromApp[1][2] == -1) {
                    app.windows[dataFromApp[1][2] + 1].childNodes[1].appendChild(app.documentElementCreatedArray[dataFromApp[1][0].idNum]);
                }
                else if (app.documentElementCreatedArray[dataFromApp[1][2]]) {
                    app.documentElementCreatedArray[dataFromApp[1][2]].appendChild(app.documentElementCreatedArray[dataFromApp[1][0].idNum]);
                }
            }
            break;
        
        case 404: //setAttribute
            if (app) {
                if (appDomArray) {
                    appDomArray.setAttribute(dataFromApp[1][0], dataFromApp[1][2]);
                }
            }
            break;
        
        case 405: //textContent
            if (app) {
                if (appDomArray) {
                    appDomArray.textContent = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 406: //value
            if (app) {
                if (appDomArray) {
                    appDomArray.value = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 407: //disabled
            if (app) {
                if (appDomArray) {
                    appDomArray.disabled = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 408: //type
            if (app) {
                if (appDomArray) {
                    appDomArray.type = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 409: //checked
            if (app) {
                if (appDomArray) {
                    appDomArray.checked = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 410: //readonly
            if (app) {
                if (appDomArray) {
                    appDomArray.readonly = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 411: //name,  must be attached with appID otherwise multiple programs may be sharing same name and cause unepected behavior.
            if (app) {
                if (appDomArray) {
                    appDomArray.name = id + "_" + (dataFromApp[1][0]);
                }
            }
            break;
        
        case 412: //text
            if (app) {
                if (appDomArray) {
                    appDomArray.text = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 413: //selectedIndex
            if (app) {
                if (appDomArray) {
                    appDomArray.selectedIndex = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 414: //multiple
            if (app) {
                if (appDomArray) {
                    appDomArray.multiple = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 415: //size
            if (app) {
                if (appDomArray) {
                    appDomArray.size = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 416: //label
            if (app) {
                if (appDomArray) {
                    appDomArray.label = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 417: //selected
            if (app) {
                if (appDomArray) {
                    appDomArray.selected = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 418: //src
            if (app) {
                if (appDomArray) {
                    appDomArray.src = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 419: //alt
            if (app) {
                if (appDomArray) {
                    appDomArray.alt = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 420: //colSpan
            if (app) {
                if (appDomArray) {
                    appDomArray.colSpan = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 421: //rowSpan
            if (app) {
                if (appDomArray) {
                    appDomArray.rowSpan = (dataFromApp[1][0]);
                }
            }
            break;
        case 422: //removeChild INCOMPLETE
           // Note we have to try to be careful this since doing it poorly adds big memory leak. 
           //For Javascript's garbage collector, this seems fine btu when it comes to DOM's, might be tricky not to leak.
           //By just doing element.innerHTML="" to remove, it introduce memory leak and unreliable DOM garabge collector action.
           //also doing element.parentNode.removeChild(element); where element is the same div element, this can also introduce memory leak
           //consider using delete element to remove it.
           //removeChild simply null the reference, not destroying the element linked to the reference.
           //always remember to delete object/events ffirst before removing its element to improve DOM's garbage collection
           //we  need more careful consideration about this
           //application may not be trying to destroy this child yet, so keep it in memory until the termination of application, which OS must destroy those elements to free up memory
           //to destroy it, the core.js must send destroy signal, so OS will destroy it right away without waiting uintil app's termination
           //Failing to do this correctly will lead Main thread (the OS) to have memory leaks. Thus eventually causing itself to crash at some point.
            if(app){
                if (dataFromApp[1][2] == -1) {//as window appending elenent
                    app.windows[dataFromApp[1][2] + 1].childNodes[1].removeChild(app.documentElementCreatedArray[dataFromApp[1][0].idNum]);
                }
                else if (app.documentElementCreatedArray[dataFromApp[1][2]]) {//as element appending elemeent
                    app.documentElementCreatedArray[dataFromApp[1][2]].removeChild(app.documentElementCreatedArray[dataFromApp[1][0].idNum]);
                }
            }
        case 500: //addEventListener
            if (app) {
                if (app.documentElementCreatedArray[dataFromApp[1][0].idNum]) { //element event related    
                    var eleID = dataFromApp[1][0].idNum;
                    //var appID=z[2];
                    //var appCallbackUID=z[1];
                    var appCallbackUID = id;
                    //var windowID=z[3][1][0].winID;
                    var windowID = dataFromApp[1][0].winID;
                    var eventName = dataFromApp[1][1];
                    //var eventID=z[3][1][2];
                    var eventID = dataFromApp[1][2];
                    
                    app.documentElementCreatedArray[eleID].addEventListener((dataFromApp[1][1]), function(event) {
                        var app = applicationds.app[appCallbackUID];//.documentElementCreatedArray[eleID];
                        var optionsSelectedArray;
                        if (app.documentElementCreatedArray[eleID].options) {
                            optionsSelectedArray = [];
                            var arr = app.documentElementCreatedArray[eleID].options;
                            var length = app.documentElementCreatedArray[eleID].options.length - 1;
                            for (var i = length; --i > 0; ) {
                                var d = optionsSelectedArray.length;
                                optionsSelectedArray[d] = arr[d].selected;
                            }
                        }
                        
                        app.mainThread.postMessage([599, appCallbackUID, eleID, windowID, eventName,
                            {
                                altKey: event.altKey,
                                button: event.button,
                                clientX: event.clientX,
                                clientY: event.clientY,
                                keyIdentifier: event.keyIdentifier,
                                keyLocation: event.keyLocation,
                                metaKey: event.metaKey,
                                relatedTarget: null,//need to expand this too; incomplete
                                screenX: event.screenX,
                                screenY: event.screenY,
                                shiftKey: event.shiftKey,
                                _checked: app.documentElementCreatedArray[eleID].checked,                            
                                _value: app.documentElementCreatedArray[eleID].value,
                                _selectedIndex: app.documentElementCreatedArray[eleID].selectedIndex,
                                _selected: app.documentElementCreatedArray[eleID].selected,
                                _optionsSelectedIDs: optionsSelectedArray
                            }
                        , eventID]);
                    }, false);
                }
                else if (dataFromApp[1][0].idNum <= -1) { //document event related
                    //var eleID=dataFromApp[1][0].idNum;
                    //var appID=z[2];
                    //var appCallbackUID=z[1];
                    var appCallbackUID = id;
                    //var windowID=z[3][1][0].winID;
                    var windowID = dataFromApp[1][0].winID;
                    var eventName = dataFromApp[1][1];
                    var window = app.windows[windowID + 1];
                    //var eventID=z[3][1][2];
                    var eventID = dataFromApp[1][2];
                    
                    if (dataFromApp[1][1] != "drag") { //can application api attach mouse events on entire window instead of content container?
                        window = window.windowContentContainer;
                    }
                    window.addEventListener(dataFromApp[1][1], function(event) {
                        var app = applicationds.app[appCallbackUID];
                        app.mainThread.postMessage([599, appCallbackUID, eleID, windowID, eventName,
                            {
                                altKey: event.altKey,
                                button: event.button,
                                clientX: event.clientX - app.windows[windowID + 1].offsetLeft,
                                clientY: event.clientY - app.windows[windowID+ 1 ].offsetTop,
                                keyIdentifier: event.keyIdentifier,
                                keyLocation: event.keyLocation,
                                metaKey: event.metaKey,
                                relatedTarget: null, //need to expand this too; incomplete
                                screenX: event.screenX,
                                screenY: event.screenY,
                                shiftKey: event.shiftKey
                            }
                        , eventID]);
                    }, false);
                }
            }
            break;
        
        case 601: //ctx property assignment
            if (app) {
                var canvas = app.documentElementCreatedArray[dataFromApp[1][1]];
                if (canvas.ctx) {
                    canvas.ctx[dataFromApp[1][2]] = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 602: //ctx function caller assignment INCOMPLETE
            if (app) {
                var canvas = app.documentElementCreatedArray[dataFromApp[1][0]];
                if (canvas.ctx) {
                    var ctx = canvas.ctx;
                    
                    if (dataFromApp[1][4] >= 0) {
                        //var appCallbackUID=z[1];
                        var appCallbackUID = id;
                        alert([code, appCallbackUID, dataFromApp[1][4], ctx[dataFromApp[1][2]].apply(ctx,dataFromApp[1][3])]);
                        return app.mainThread.postMessage([code, appCallbackUID, dataFromApp[1][4], ctx[dataFromApp[1][2]].apply(ctx, dataFromApp[1][3])]);
                    }
                    else {
                        ctx[dataFromApp[1][2]].apply(ctx, dataFromApp[1][3]);
                    }
                }
            }
            break;
        
        case 700: //initialize ajax xmlhttprequest INCOMPLETE
            if (app) {
                app.xmlHttpRequestArray[app.xmlHttpRequestArray.length] = new XMLHttpRequest();
                var canvas = app.documentElementCreatedArray[dataFromApp[1][1]];
                if (canvas.ctx) {
                    canvas.ctx[dataFromApp[1][2]] = (dataFromApp[1][0]);
                }
            }
            break;
        
        case 1000: //run custom application from application, incomplete and may need to be removed when completed. //this is mainly for debugging
            //var bb = new Blob([],{type : "text\/plain" });            
            //var bcou=URL.createObjectURL(bb);
            
            applicationds.run(3, null, dataFromApp[1][0]);
            break;
        
        //case :
        //    
        //    break;
        
        default:
            console.log("UNKNOWN CODE: " + code);
        }//endof switch
        
        
        
        /*
        z=z.data;
        
        if(z[0]==2){//from application (went through wwThread.js)
            var id=z[1];
            var appID=z[2];
            var dataFromApp=z[3];
            applicationds.app[id].running=true;
        }
        else if(z[0]==-1){//from application (went through wwThread.js) console logging
            var id=z[1];
            var appID=z[2];
            var dataFromApp=z[3][1];
            console.log(dataFromApp);
            
        }else if(z[0]==202){//new window
            var dataFromApp=z[3];
            if(dataFromApp[1][0]==-1){//see if window is -1, if so generate it as app's main window
                var id=z[1];
                applicationds.app[id].windows[applicationds.app[id].windows.length]=windows.create(dataFromApp[1][1]);
                var window=applicationds.app[id].windows[applicationds.app[id].windows.length-1];
                window.show();
                window.moveToDesktop();
            }
        }else if(z[0]==201){//resize
            var dataFromApp=z[3];
            var id=z[1];
            if(applicationds.app[id].windows[dataFromApp[1][2]+1]){
                var window=applicationds.app[id].windows[dataFromApp[1][2]+1];
                window.style.height=dataFromApp[1][1]+"px"
                window.style.width=dataFromApp[1][0]+"px";
                window.resizeItself();
            }
        }
        else if(z[0]==203){//window title update
            var dataFromApp=z[3];
            var id=z[1];
            if(applicationds.app[id].windows[dataFromApp[1][0]+1]){
                var window=applicationds.app[id].windows[dataFromApp[1][0]+1];
                    window.windowTitleContainer.windowTitleText.textContent=dataFromApp[1][1];
                    window.windowTitleContainer.onTitleUpdate();
            }
        }
        else if(z[0]==402){//createElement (also appending it ot documentfragment)
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                var ele=document.createElement(dataFromApp[1][0]);
                app.documentElementCreatedArray[dataFromApp[1][2]]=ele;
                if(dataFromApp[1][0]=='img'){
                    ele.draggable=false;
                    ele.ondragstart=function(){return false}
                }
            }
        }
        else if(z[0]==403){//appendChild
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(dataFromApp[1][2]==-1){
                    app.windows[dataFromApp[1][2]+1].childNodes[1].appendChild(app.documentElementCreatedArray[dataFromApp[1][0].idNum]);
                }
                else if(app.documentElementCreatedArray[dataFromApp[1][2]]){
                    app.documentElementCreatedArray[dataFromApp[1][2]].appendChild(app.documentElementCreatedArray[dataFromApp[1][0].idNum]);
                }
            }
        }
        else if(z[0]==404){//setAttribute
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][2]]){
                    app.documentElementCreatedArray[dataFromApp[1][2]].setAttribute(dataFromApp[1][0],dataFromApp[1][1]);
                }
            }
        }
        else if(z[0]==405){//textContent
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].textContent=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==406){//value
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].value=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==407){//disabled
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].disabled=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==408){//type
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].type=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==409){//checked
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].checked=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==410){//readonly
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].readonly=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==411){//name,  must be attached with appID otherwise multiple programs may be sharing same name and cause unepected behavior.
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    
                    app.documentElementCreatedArray[dataFromApp[1][1]].name=id+"_"+(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==412){//text
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    
                    app.documentElementCreatedArray[dataFromApp[1][1]].text=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==413){//selectedIndex
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].selectedIndex=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==414){//multiple
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].multiple=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==415){//size
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].size=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==416){//label
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].label=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==417){//selected
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].selected=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==418){//src
           var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].src=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==419){//alt
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].alt=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==420){//colSpan
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].colSpan=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==421){//rowSpan
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                if(app.documentElementCreatedArray[dataFromApp[1][1]]){
                    app.documentElementCreatedArray[dataFromApp[1][1]].rowSpan=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==500){//addEventListener
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            
            if(app){    
                
                if(app.documentElementCreatedArray[dataFromApp[1][0].idNum]){//element event related    
                    var eleID=dataFromApp[1][0].idNum;
                    var appID=z[2];
                    var appCallbackUID=z[1];
                    var windowID=z[3][1][0].winID;
                    var eventName=dataFromApp[1][1];
                    var eventID=z[3][1][2];
                    app.documentElementCreatedArray[eleID].addEventListener((dataFromApp[1][1]),function(event){
                        var app=applicationds.app[appCallbackUID];//.documentElementCreatedArray[eleID];
                        var optionsSelectedArray;
                        if(app.documentElementCreatedArray[eleID].options){
                            optionsSelectedArray=[];
                            var arr=app.documentElementCreatedArray[eleID].options;
                            var length=app.documentElementCreatedArray[eleID].options.length-1
                            for(var i=length;--i>0;){
                                    var d=optionsSelectedArray.length;
                                    optionsSelectedArray[d]=arr[d].selected;
                            }
                        }
                        
                        app.mainThread.postMessage([599,appCallbackUID,eleID,windowID,eventName,
                            {altKey:event.altKey,
                            button:event.button,
                            clientX:event.clientX,
                            clientY:event.clientY,
                            keyIdentifier:event.keyIdentifier,
                            keyLocation:event.keyLocation,
                            metaKey:event.metaKey,
                            relatedTarget:null,//need to expand this too; incomplete
                            screenX:event.screenX,
                            screenY:event.screenY,
                            shiftKey:event.shiftKey,
                            _checked:app.documentElementCreatedArray[eleID].checked,                            
                            _value:app.documentElementCreatedArray[eleID].value,
                            _selectedIndex:app.documentElementCreatedArray[eleID].selectedIndex,
                            _selected:app.documentElementCreatedArray[eleID].selected,
                            _optionsSelectedIDs:optionsSelectedArray
                            }
                        ,eventID]);
                        
                    },false);
                }
                else if(dataFromApp[1][0].idNum<=-1){//document event related    
                    //var eleID=dataFromApp[1][0].idNum;
                    var appID=z[2];
                    var appCallbackUID=z[1];
                    var windowID=z[3][1][0].winID;
                    var eventName=dataFromApp[1][1];
                    var window=app.windows[windowID+1];
                    var eventID=z[3][1][2];
                    if(dataFromApp[1][1]!="drag"){// can application api attach mouse events on entire window instead of content container?
                        window=window.windowContentContainer;
                    }
                    window.addEventListener(dataFromApp[1][1],function(event){
                        
                        var app=applicationds.app[appCallbackUID];
                        app.mainThread.postMessage([599,appCallbackUID,eleID,windowID,eventName,
                            {altKey:event.altKey,
                            button:event.button,
                            clientX:event.clientX-app.windows[windowID+1].offsetLeft,
                            clientY:event.clientY-app.windows[windowID+1].offsetTop,
                            keyIdentifier:event.keyIdentifier,
                            keyLocation:event.keyLocation,
                            metaKey:event.metaKey,
                            relatedTarget:null,//need to expand this too; incomplete
                            screenX:event.screenX,
                            screenY:event.screenY,
                            shiftKey:event.shiftKey
                            
                            }
                        ,eventID]);
                    },false);
                }
                
            }
        }else if(z[0]==600){//getContext, http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-canvas-getcontext
        //each canvas element can only have up to one getContext. If it's already called, use that instead.
        //I don't think we have to do anything on this side.  Just create ctx attribute and use ctx on OS side
        //maybe return object containing ctx properties (not including functions)
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            if(app){
                app.documentElementCreatedArray[dataFromApp[1][1]].ctx=app.documentElementCreatedArray[dataFromApp[1][1]].getContext(dataFromApp[1][0]);
            }
        }
        else if(z[0]==601){//ctx property assignment
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            
            if(app){
                var canvas=app.documentElementCreatedArray[dataFromApp[1][1]];
                if(canvas.ctx){
                    canvas.ctx[dataFromApp[1][2]]=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==602){//ctx function caller assignment
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            
            if(app){
                var canvas=app.documentElementCreatedArray[dataFromApp[1][0]];
                if(canvas.ctx){
                    var ctx=canvas.ctx;
                    
                    if(dataFromApp[1][4]>=0){
                        var appCallbackUID=z[1];
                        alert([602,appCallbackUID,dataFromApp[1][4],ctx[dataFromApp[1][2]].apply(ctx,dataFromApp[1][3])]);
                        return app.mainThread.postMessage([602,appCallbackUID,dataFromApp[1][4],ctx[dataFromApp[1][2]].apply(ctx,dataFromApp[1][3])]);
                    }else
                        ctx[dataFromApp[1][2]].apply(ctx,dataFromApp[1][3]);
                }
                
            }
        }
        else if(z[0]==700){//initialize ajax xmlhttprequest
            var dataFromApp=z[3];
            var id=z[1];
            var app=applicationds.app[id];
            
            if(app){
            app.xmlHttpRequestArray[app.xmlHttpRequestArray.length]=new XMLHttpRequest();
                var canvas=app.documentElementCreatedArray[dataFromApp[1][1]];
                if(canvas.ctx){
                    canvas.ctx[dataFromApp[1][2]]=(dataFromApp[1][0]);
                }
            }
        }
        else if(z[0]==1000){//run custom application from application, incomplete and may need to be removed when completed. //this is mainly for debugging
            //var bb = new Blob([],{type : "text\/plain" });            
            //var bcou=URL.createObjectURL(bb);
            
            applicationds.run(3,null,z[3][1][0]);
        }
        /**/
    }
    
    d.onerror=function(message,filename,lineno){
        
    }
    
    d.postMessage("");//starts this thread handler

});

function applicationds(){}
applicationds.app=[{}];
applicationds.run=function(appID,threadHandlerID/*optional*/,stringScript/*optional*/){
    var app=new Object();
    app.document=document.createDocumentFragment();
    app.documentElementCreatedArray=[];
    app.xmlHttpRequestArray=[];
    app.windows=[];
    app.appID=appID;
    app.running=false;
    app.mainThread=null;
    this.app[this.app.length]=app;
    //app.id;
    if(window.chrome){
        app.mainThread=applicationst.newInstance(appID,stringScript);
        
    }else{  
        app.mainThread=threads.threadHandlers[threadHandlerID?parseInt(threadHandlerID):0%threads.threadHandlers.length];
        app.mainThread.postMessage([1,appID,stringScript]);
    }
    return app;
}