/*
Like index.js, but intialize multi-workers threads and loads them there.  


*/
//todo: get permission, add security layer. Detect abnormal performance behavior.
window=this;
var responseTimeArrayAppID=[];
var conto=0;
var opeActPerMS=125;
if (window.document==null && window.Worker) {
    var oldpostMessage=postMessage;
        
        postMessage=function(msg){
            var d=Date.now();
            if(d>responseTimeArrayAppID[msg[2]]){
                responseTimeArrayAppID[msg[2]]=d;
                oldpostMessage(msg);
                conto=0;
            }else if(d==responseTimeArrayAppID[msg[2]] && conto<opeActPerMS){
                oldpostMessage(msg);
                conto++;
                
            }
            return;
            
        }
    
    self.onmessage=function(event){//this don't need security check, since messages here are coming from OS.
        var data=event.data;
        var idEvent=data[0];
        if(idEvent==1){//run new app
            applications.newInstance(data[1],data[2]);
        }else if(idEvent==599){//send ongoing event to application
            applications.threads[data[1]].postMessage([599,data[2],data[3],data[4],data[5],data[6],data[7]]);
        }
        else if(idEvent==602){//send ongoing event to application
            applications.threads[data[1]].postMessage([602,data[2],data[3],data[4],data[5],data[6],data[7]]);
        }
        
    }
    function applications(){}

    applications.threads=[];
    applications.threadsCount=0;
    applications.newInstance=function(appID,param){

        var applicaiton=new Worker('module/app'+appID+'/index.js');

        applicaiton.appID=appID;//app ID. points to original id
        applicaiton.id=++applications.threadsCount;//unique id for each running applicaiton
        applicaiton.loaded=false;
        applicaiton.param2Pass=param;
        applicaiton.coreEnabled=false;
        applications.threads[applications.threadsCount]=applicaiton;
        responseTimeArrayAppID[applicaiton.appID]=Date.now();
        
        applicaiton.onmessage=function(event){//this will need security check, since this is coming from application
            applicationPostMessageHandler(this, event.data, false);
            
            /*
            var d=event.data;
            
            if(d[0]==1){//from core.js message at startup
                postMessage([201,this.id,this.appID,d]);//send this to OS that this application wants its window resized
                this.postMessage([2,this.param2Pass]);//send param back to core
            }
            if(d[0]==-1){//console logging from application
                postMessage([-1,this.id,this.appID,d]);//send this to OS that this application wants its window resized
            }
            else if(d[0]==24){//from core.js message
                this.coreEnabled=d[1];
                postMessage([2,this.id,this.appID,d]);//send this to OS that this application is connected to OS and running; (create a new window, load fragment, etc from there)
            }
            else if(d[0]==201 ){//from igui.js message, resize window
                postMessage([201,this.id,this.appID,d]);//send this to OS that this application wants its window resized
            }
            else if(d[0]==202){//from igui.js message, new window
                postMessage([202,this.id,this.appID,d]);//send this to OS that this application wants a new window generated
            }
            else if(d[0]==203){//from igui.js message, window title update
                postMessage([203,this.id,this.appID,d]);//send this to OS that this application wants a new window generated
            }
            else if(d[0]==402){//from igui.js message, createElement
                postMessage([402,this.id,this.appID,d]);//send this to OS that this application wants a new element created
            }
            else if(d[0]==403){//from igui.js message, appendChild
                postMessage([403,this.id,this.appID,d]);//send this to OS that this application wants to append Element to something
            }
            else if(d[0]==404){//from igui.js message, setAttribute
                postMessage([404,this.id,this.appID,d]);//send this to OS that this application wants to set attribute to something
            }
            else if(d[0]==405){//from igui.js message, textContent
                postMessage([405,this.id,this.appID,d]);//send this to OS that this application wants to set textContent;
            }
            else if(d[0]==406){//from igui.js message, element value
                postMessage([406,this.id,this.appID,d]);//send this to OS that this application wants to set value;
            }
            else if(d[0]==407){//from igui.js message, element disabled
                postMessage([407,this.id,this.appID,d]);//send this to OS that this application wants to set disabled;
            }
            else if(d[0]==408){//from igui.js message, element type
                postMessage([408,this.id,this.appID,d]);//send this to OS that this application wants to set type;
            }
            else if(d[0]==409){//from igui.js message, element checked
                postMessage([409,this.id,this.appID,d]);//send this to OS that this application wants to set checked;
            }
            else if(d[0]==410){//from igui.js message, element readonly
                postMessage([410,this.id,this.appID,d]);//send this to OS that this application wants to set readonly;
            }
            else if(d[0]==411){//from igui.js message, element readonly
                postMessage([411,this.id,this.appID,d]);//send this to OS that this application wants to set readonly;
            }
            else if(d[0]==412){//from igui.js message, element readonly
                postMessage([412,this.id,this.appID,d]);//send this to OS that this application wants to set readonly;
            }
            else if(d[0]==413){//from igui.js message, element readonly
                postMessage([413,this.id,this.appID,d]);//send this to OS that this application wants to set readonly;
            }
            else if(d[0]==414){//from igui.js message, element multiple
                postMessage([414,this.id,this.appID,d]);//send this to OS that this application wants to set multiple;
            }
            else if(d[0]==415){//from igui.js message, element size
                postMessage([415,this.id,this.appID,d]);//send this to OS that this application wants to set size;
            }
            else if(d[0]==416){//from igui.js message, element label
                postMessage([416,this.id,this.appID,d]);//send this to OS that this application wants to set label;
            }
            else if(d[0]==417){//from igui.js message, element selected
                postMessage([417,this.id,this.appID,d]);//send this to OS that this application wants to set selected;
            }
            else if(d[0]==418){//from igui.js message, element src. Incompleted permission, incompleted replace regexp; temporary security in place;
                //note: make sure src stays within in its app folder, not ouside of the app folder.
                //unless a user may want to add permission to allow that to happen
                //external reference or domain should be banned default, unless user allows it.
                d[1][0]='modulesApp/app'+this.appID+'/'+(d[1][0]).toString().replace("..","").replace(/(http|https):/,"").replace(/(www\.)/,"");
                postMessage([418,this.id,this.appID,d]);//send this to OS that this application wants to set src;
                
            }
            else if(d[0]==419){//from igui.js message, element alt
                postMessage([419,this.id,this.appID,d]);//send this to OS that this application wants to set alt;
            }
            else if(d[0]==420){//from igui.js message, element colSpan
                postMessage([420,this.id,this.appID,d]);//send this to OS that this application wants to set alt;
            }
            else if(d[0]==421){//from igui.js message, element rowSpan
                postMessage([421,this.id,this.appID,d]);//send this to OS that this application wants to set alt;
            }
            else if(d[0]==500){//from igui.js message, addEventListener
                postMessage([500,this.id,this.appID,d]);//send this to OS that this application wants to set textContent;
            }
            else if(d[0]==600){//from igui.js message, getContext
                postMessage([600,this.id,this.appID,d]);//send this to OS that this application wants to set fillStyle;
            }
            else if(d[0]==601){//from igui.js message, getContext properties assigner (note: inspect performance afterward)
                postMessage([601,this.id,this.appID,d]);//send this to OS that this application wants to set getContext property (may be anything non-function);
            }
            else if(d[0]==602){//from igui.js message, getContext function caller (note: inspect performance afterward)
                postMessage([602,this.id,this.appID,d]);//send this to OS that this application wants to call ctx function
            }
            else if(d[0]==700){//from igui.js message,
                postMessage([700,this.id,this.appID,d]);//send this to OS that this application wants to call ctx function
            }
            else if(d[0]==1000){//from igui.js message,
                postMessage([1000,this.id,this.appID,d]);//send this to OS that this application wants to call ctx function
            }
            */
        
        };
    }

}
else if(window.document){//tempfix 
    function applicationst(){}
    
    applicationst.threads=[];
    applicationst.threadsCount=0;
    applicationst.newInstance=function(appID,param){
        var applicaiton=new Worker('main/module/app'+appID+'/index.js');
        applicaiton.appID=appID;//app ID. points to original id
        applicaiton.id=++applicationst.threadsCount;//unique id for each running applicaiton
        applicaiton.loaded=false;
        applicaiton.coreEnabled=false;
        applicaiton.param2Pass=param;
        applicationst.threads[applicationst.threadsCount]=applicaiton;
        applicaiton.actualPostMessage=applicaiton.postMessage;
        applicaiton.postMessage=function(data){
            if(data[1]==null)return;
            var data=data;
            var idEvent=data[0];
            if(idEvent==1){//run new app
                
                //applicationst.newInstance(data[1],data[2]);
            }else if(idEvent==599){//send ongoing event to application
                this.actualPostMessage([599,data[2],data[3],data[4],data[5],data[6],data[7]]);
            }
            else if(idEvent==602){//send ongoing event to application
                this.actualPostMessage([602,data[2],data[3],data[4],data[5],data[6],data[7]]);
            }
        }
        applicaiton.onmessage = function(event) { //this will need security check, since this is coming from application
            applicationPostMessageHandler(this, event.data, true);
            
            /*
            var d = event.data;
            if(d[0]==1){//from core.js message at startup
                postMessage([201,this.id,this.appID,d]);
                this.actualPostMessage([2,this.param2Pass]);
            }
            if(d[0]==-1){//console logging from application
                postMessage([-1,this.id,this.appID,d]);//send this to OS that this application wants its window resized
            }
            else if(d[0]==24){//from core.js message
                this.coreEnabled=d[1];
                postMessage([2,this.id,this.appID,d]);//send this to OS that this application is connected to OS and running; (create a new window, load fragment, etc from there)
            }
            else if(d[0]==201 ){//from igui.js message, resize window
                postMessage([201,this.id,this.appID,d]);//send this to OS that this application wants its window resized
            }
            else if(d[0]==202){//from igui.js message, new window
                postMessage([202,this.id,this.appID,d]);//send this to OS that this application wants a new window generated
            }
            else if(d[0]==203){//from igui.js message, window title update
                postMessage([203,this.id,this.appID,d]);//send this to OS that this application wants a new window generated
            }
            else if(d[0]==402){//from igui.js message, createElement
                postMessage([402,this.id,this.appID,d]);//send this to OS that this application wants a new element created
            }
            else if(d[0]==403){//from igui.js message, appendChild
                postMessage([403,this.id,this.appID,d]);//send this to OS that this application wants to append Element to something
            }
            else if(d[0]==404){//from igui.js message, setAttribute
                postMessage([404,this.id,this.appID,d]);//send this to OS that this application wants to set attribute to something
            }
            else if(d[0]==405){//from igui.js message, textContent
                postMessage([405,this.id,this.appID,d]);//send this to OS that this application wants to set textContent;
            }
            else if(d[0]==406){//from igui.js message, element value
                postMessage([406,this.id,this.appID,d]);//send this to OS that this application wants to set value;
            }
            else if(d[0]==407){//from igui.js message, element disabled
                postMessage([407,this.id,this.appID,d]);//send this to OS that this application wants to set disabled;
            }
            else if(d[0]==408){//from igui.js message, element type
                postMessage([408,this.id,this.appID,d]);//send this to OS that this application wants to set type;
            }
            else if(d[0]==409){//from igui.js message, element checked
                postMessage([409,this.id,this.appID,d]);//send this to OS that this application wants to set checked;
            }
            else if(d[0]==410){//from igui.js message, element readonly
                postMessage([410,this.id,this.appID,d]);//send this to OS that this application wants to set readonly;
            }
            else if(d[0]==411){//from igui.js message, element readonly
                postMessage([411,this.id,this.appID,d]);//send this to OS that this application wants to set readonly;
            }
            else if(d[0]==412){//from igui.js message, element readonly
                postMessage([412,this.id,this.appID,d]);//send this to OS that this application wants to set readonly;
            }
            else if(d[0]==413){//from igui.js message, element readonly
                postMessage([413,this.id,this.appID,d]);//send this to OS that this application wants to set readonly;
            }
            else if(d[0]==414){//from igui.js message, element multiple
                postMessage([414,this.id,this.appID,d]);//send this to OS that this application wants to set multiple;
            }
            else if(d[0]==415){//from igui.js message, element size
                postMessage([415,this.id,this.appID,d]);//send this to OS that this application wants to set size;
            }
            else if(d[0]==416){//from igui.js message, element label
                postMessage([416,this.id,this.appID,d]);//send this to OS that this application wants to set label;
            }
            else if(d[0]==417){//from igui.js message, element selected
                postMessage([417,this.id,this.appID,d]);//send this to OS that this application wants to set selected;
            }
            else if(d[0]==418){//from igui.js message, element src. Incompleted permission, incompleted replace regexp; temporary security in place;
                //note: make sure src stays within in its app folder, not ouside of the app folder.
                //unless a user may want to add permission to allow that to happen
                //external reference or domain should be banned default, unless user allows it.
                d[1][0]='modulesApp/app'+this.appID+'/'+d[1][0].toString().replace("..","").replace(/(http|https):/,"").replace(/(www\.)/,"");
                postMessage([418,this.id,this.appID,d]);//send this to OS that this application wants to set src;
            }
            else if(d[0]==419){//from igui.js message, element alt
                postMessage([419,this.id,this.appID,d]);//send this to OS that this application wants to set alt;
            }
            else if(d[0]==420){//from igui.js message, element colSpan
                postMessage([420,this.id,this.appID,d]);//send this to OS that this application wants to set alt;
            }
            else if(d[0]==421){//from igui.js message, element rowSpan
                postMessage([421,this.id,this.appID,d]);//send this to OS that this application wants to set alt;
            }
            else if(d[0]==500){//from igui.js message, addEventListener
                postMessage([500,this.id,this.appID,d]);//send this to OS that this application wants to set textContent;
            }
            else if(d[0]==600){//from igui.js message, getContext
                postMessage([600,this.id,this.appID,d]);//send this to OS that this application wants to set fillStyle;
            }
            else if(d[0]==601){//from igui.js message, getContext properties assigner (note: inspect performance afterward)
                postMessage([601,this.id,this.appID,d]);//send this to OS that this application wants to set getContext property (may be anything non-function);
            }
            else if(d[0]==602){//from igui.js message, getContext function caller (note: inspect performance afterward)
                postMessage([602,this.id,this.appID,d]);//send this to OS that this application wants to call ctx function
            }
            else if(d[0]==700){//from igui.js message,
                postMessage([700,this.id,this.appID,d]);//send this to OS that this application wants to call ctx function
            }
            else if(d[0]==1000){//from igui.js message,
                postMessage([1000,this.id,this.appID,d]);//send this to OS that this application wants to call ctx function
            }
            */
        
        };
        return applicaiton;
    }
}

function postMessage(arg){
        threads.threadHandlers[0].onmessage({data:arg})
        return;      
}


function applicationPostMessageHandler(app, data, temp) {
    var code = data[0];
    
    switch (data[0]) {
    case -1: //console logging from application
        //send this to OS that this application wants its window resized
        break;
    
    case 1: //from core.js message at startup
        //send this to that this app is loaded
        code = 201;
        
        //send param back to core
        if (temp) {
            app.actualPostMessage([2, app.param2Pass]);
        }
        else {
            app.postMessage([2, app.param2Pass]);
        }
        break;
    
    case 24: //from core.js message
        //send this to OS that this application is connected to OS and running; (create a new window, load fragment, etc from there)
        code = 2;
        app.coreEnabled = data[1];
        break;
    
    case 201: //from igui.js message, resize window
        //send this to OS that this application wants its window resized
        break;
    
    case 202: //from igui.js message, new window
        //send this to OS that this application wants a new window generated
        break;
    
    case 203: //from igui.js message, window title update
        //send this to OS that this application wants a new window generated
        break;
    
    case 402: //from igui.js message, createElement
        //send this to OS that this application wants a new element created
        break;
    
    case 403: //from igui.js message, appendChild
        //send this to OS that this application wants to append Element to something
        break;
    
    case 404: //from igui.js message, setAttribute
        //send this to OS that this application wants to set attribute to something
        break;
    
    case 405: //from igui.js message, textContent
        //send this to OS that this application wants to set textContent;
        break;
    
    case 406: //from igui.js message, element value
        //send this to OS that this application wants to set value;
        break;
    
    case 407: //from igui.js message, element disabled
        //send this to OS that this application wants to set disabled;
        break;
    
    case 408: //from igui.js message, element type
        //send this to OS that this application wants to set type;
        break;
    
    case 409: //from igui.js message, element checked
        //send this to OS that this application wants to set checked;
        break;
    
    case 410: //from igui.js message, element readonly
        //send this to OS that this application wants to set readonly;
        break;
    
    case 411: //from igui.js message, element readonly
        //send this to OS that this application wants to set readonly;
        break;
    
    case 412: //from igui.js message, element readonly
        //send this to OS that this application wants to set readonly;
        break;
    
    case 413: //from igui.js message, element readonly
        //send this to OS that this application wants to set readonly;
        break;
    
    case 414: //from igui.js message, element multiple
        //send this to OS that this application wants to set multiple;
        break;
    
    case 415: //from igui.js message, element size
        //send this to OS that this application wants to set size;
        break;
    
    case 416: //from igui.js message, element label
        //send this to OS that this application wants to set label;
        break;
    
    case 417://from igui.js message, element selected
        //send this to OS that this application wants to set selected;
        break;
    
    case 418: //from igui.js message, element src. Incompleted permission, incompleted replace regexp; temporary security in place;
        //note: make sure src stays within in its app folder, not ouside of the app folder.
        //unless a user may want to add permission to allow that to happen
        //external reference or domain should be banned default, unless user allows it.
        data[1][0] = "module/app" + app.appID + "/" + data[1][0].toString().replace("..", "").replace(/(http|https):/, "").replace(/(www\.)/, "");
        //send this to OS that this application wants to set src;
        break;
    
    case 419: //from igui.js message, element alt
        //send this to OS that this application wants to set alt;
        break;
    
    case 420: //from igui.js message, element colSpan
        //send this to OS that this application wants to set alt;
        break;
    
    case 421: //from igui.js message, element rowSpan
        //send this to OS that this application wants to set alt;
        break;
     case 422: //from igui.js message, removeChild. 
        //send this to OS that this application wants this element removed
        break;
    
    case 500: //from igui.js message, addEventListener
        //send this to OS that this application wants to set textContent;
        break;
    
    case 600: //from igui.js message, getContext
        //send this to OS that this application wants to set fillStyle;
        break;
    
    case 601: //from igui.js message, getContext properties assigner (note: inspect performance afterward)
        //send this to OS that this application wants to set getContext property (may be anything non-function);
        break;
    
    case 602: //from igui.js message, getContext function caller (note: inspect performance afterward)
        //send this to OS that this application wants to call ctx function
        break;
    
    case 700: //from igui.js message,
        //send this to OS that this application wants to call ctx function
        break;
    
    case 1000: //from igui.js message,
        //send this to OS that this application wants to run a new application based on a string.
        break;
    
    default:
        code = -1;
    }//endof switch
    
    //send message repsonse

		postMessage([code, app.id, app.appID, data]);
	
}